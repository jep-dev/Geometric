# Do not edit this file directly. Configuration is done in Makefile.conf.
# Most configuration here honors existing settings.
include Makefile.conf

EMPTY:=
SPACE:=$(EMPTY) $(EMPTY)
COMMA:=,
define BREAK
$1
$(1:%=  )  
endef
BR:=$(call BREAK,\)#) <- Backslashes can confuse highlighters/validaters

DEST_DIR:=
NULL?=/dev/null

DIR_BIN?=$(DEST_DIR)bin/
DIR_DBG?=dbg/
DIR_APP?=app/
DIR_SRC?=src/
DIR_HDR?=include/
DIR_SO?=$(DEST_DIR)lib/
DIR_O?=$(DEST_DIR)obj/
DIR_DEP?=$(DIR_O)

vpath %.cpp $(DIR_APP)
vpath %.cpp $(DIR_SRC)
vpath %.hpp $(DIR_HPP)
vpath %.tpp $(DIR_HDR)

MERGE=$(subst $(SPACE),$1,$2)
SORT_MERGE=$(call MERGE,$1,$(sort $2))
SPLIT=$(subst $1,$(SPACE),$2)
override RPATH:=-Wl,-rpath,$(call SORT_MERGE,:,$(call SPLIT,:,$(RPATH) $(DIR_O) $(DIR_SO)))
override CXXFLAGS+=$(strip $(addprefix -I,$(sort $(DIR_HDR))))\
	$(sort $(call CONFIG_O,$(REQ_ALL)))
SO_LDLIBS:=$(LDLIBS)
EXE_LDLIBS:=$(LDLIBS)
override LDFLAGS+=$(RPATH) $(strip $(addprefix -L,$(sort $(DIR_SO) $(DIR_O)))) # TODO

PAT_APP=$(1:%=$(DIR_APP)%.cpp)
PAT_CPP=$(1:%=$(DIR_SRC)%.cpp)
PAT_HPP=$(1:%=$(DIR_HDR)%.hpp)
PAT_TPP=$(1:%=$(DIR_HDR)%.tpp)
PAT_D=$(1:%=$(DIR_DEP)%.d)
PAT_TD=$(1:%=$(DIR_DEP)%.Td)
PAT_O=$(1:%=$(DIR_O)%.o)
PAT_SO=$(1:%=$(DIR_SO)lib%.so)
PAT_EXE=$(1:%=$(DIR_BIN)%)

# Pattern inverses; both paths are taken so that the pipeline is flexible;
# sources and targets can be added/removed/etc. beyond their automatic
# discovery/generation.
UNPAT_APP=$(1:$(DIR_APP)%.cpp=%)
UNPAT_CPP=$(1:$(DIR_SRC)%.cpp=%)
UNPAT_HPP=$(1:$(DIR_HDR)%.hpp=%)
UNPAT_TPP=$(1:$(DIR_HDR)%.hpp=%)
UNPAT_D=$(1:$(DIR_DEP)%.d)
UNPAT_TD=$(1:$(DIR_DEP)%.Td)
UNPAT_EXE=$(1:$(DIR_BIN)%=%)
UNPAT_SO=$(1:$(DIR_SO)lib%.so=%)
UNPAT_O=$(1:$(DIR_O)%.o=%)

include Utilities.mk

# Preserve alternate application sources from configuration
override SRCS_EXE+=$(call WPAT,APP,*)
override HDRS_EXE:=$(wildcard $(SRCS_EXE:%.cpp=%.hpp %.tpp))
# Only remove this if app and library byproducts are separated!
#   obj/.o,.d,.Td files will collide until the next Makefile version.
override SRCS_SO:=$(filter-out $(SRCS_EXE),$(SRCS_SO) $(call WPAT,CPP,*))

NAMES_EXE:=$(sort $(call UNPAT_APP,$(SRCS_EXE)))
NAMES_SO:=$(sort $(call UNPAT_CPP,$(SRCS_SO)))
DEPS_EXE:=$(call PAT_D,$(NAMES_EXE))
DEPS_SO:=$(call PAT_D,$(NAMES_SO))
FILES_EXE:=$(sort $(call REPAT,APP,EXE,$(SRCS_EXE)))
FILES_SO:=$(sort $(call REPAT,CPP,SO,$(SRCS_SO)))

TARGET?=$(firstword $(FILES_EXE))
default: $(TARGET) $(COMPLETE)

$(COMPLETE): $(FILES_SO) $(FILES_EXE); @echo $(CXXFLAGS) > $@

val-%:; @echo $($*)
var-%:; @echo '"$$($*)"="$($*)"'
state-%:; @echo '$$(value $*)=$(value $*)'
vars-%:; @$(foreach V,$($*),echo '$V={$($V)}';)

# Now clean-main removes bin/main, and clean-bin and clean-EXE are the same
#   - but this is too greedy to run without a --dry-run pass, which outweighs
#   or negates the benefit of convenience for the uninitiated.
clean-%:; @rm -i -f $(wildcard $(filter $*% %$* %$*%,\
	$(foreach V,EXE SO O D TD,$(call PAT_$V,$(NAMES_EXE) $(NAMES_SO))))\
	$(call DO_EA,$(*:%=PAT_%),$(NAMES_EXE) $(NAMES_SO)))
clean: $(addprefix clean-,EXE SO O D COMPLETE)

BUILD_DEP=$(CXX) $(CXXFLAGS) -MM -MT '$(DIR_DEP)$*.d' $< -MF $@
$(call PAT_D,$(NAMES_EXE)): $(DIR_O)%.d: $(DIR_APP)%.cpp; $(BUILD_DEP)
$(call PAT_D,$(NAMES_SO)): $(DIR_O)%.d: $(DIR_SRC)%.cpp; $(BUILD_DEP)

$(call PAT_EXE,$(NAMES_EXE)): $(DIR_BIN)%: $(DIR_O)%.o $(DIR_O)%.d $(FILES_SO) $(DEPS_$*)
	$(CXX) $(LDFLAGS)\
		-o $@ $< $(LDLIBS) $(LDLIBS_$*) $(sort $(call CONFIG_SO,$(REQ_$*)))

$(call PAT_O,$(NAMES_EXE)): $(DIR_O)%.o: \
	$(DIR_APP)%.cpp $(DIR_O)%.d $(foreach N,CPP O SO,$(call $N_EXTRACT,$*))
	$(CXX) $(CXXFLAGS) $(sort $(call CONFIG_O,$(REQ_$*))) -c\
		-o $@ $<

$(call PAT_SO,$(NAMES_SO)): $(DIR_SO)lib%.so: $(DIR_O)%.o
	$(CXX) $(LDFLAGS) $< -shared\
		-o $@ $(LDLIBS) $(LDLIBS_$*) $(sort $(call CONFIG_SO,$(REQ_$*)))

$(call PAT_O,$(NAMES_SO)): \
$(DIR_O)%.o: $(DIR_SRC)%.cpp $(DIR_DEP)%.d \
	$(foreach N,CPP O SO,$(call $N_EXTRACT,$*))
	$(CXX) $(CXXFLAGS) $(sort $(call CONFIG_O,$(REQ_$*))) -fPIC -c \
		-o $@ $(call PAT_SRC,$*) $<

# Generate auto-dep injection - what could go wrong?
#-include $(call PAT_D,$(NAMES_EXE) $(NAMES_SO))
include $(wildcard $(DEPS_EXE) $(DEPS_SO)) Doxygen.mk

debug: override CXXFLAGS+=-Og -ggdb -g3 -fno-omit-frame-pointer
debug: clean default

.PHONY: val-% var-% vars-% state-% debug clean-% clean
.PRECIOUS: $(DIR_DEP)%.d $(COMPLETE)
